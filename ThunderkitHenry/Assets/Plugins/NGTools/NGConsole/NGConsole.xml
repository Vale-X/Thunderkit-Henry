<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NGConsole</name>
    </assembly>
    <members>
        <member name="T:NGDebug">
            <summary>Custom loggers provided by NG Console.</summary>
        </member>
        <member name="M:NGDebug.LogHierarchy(UnityEngine.GameObject)">
            <summary>Writes the hierarchy of the given Object, as a list of pingable button for each parent.</summary>
            <param name="gameObject"></param>
        </member>
        <member name="M:NGDebug.LogHierarchy(UnityEngine.RaycastHit)">
            <summary>Writes the hierarchy of the given RaycastHist, as a list of pingable button for each parent.</summary>
            <param name="hit"></param>
        </member>
        <member name="M:NGDebug.LogHierarchy(UnityEngine.Component)">
            <summary>Writes the hierarchy of the given Component, as a list of pingable button for each parent.</summary>
            <param name="component"></param>
        </member>
        <member name="M:NGDebug.Log(UnityEngine.Object[])">
            <summary>
            <para>Writes a log containing a pingable button for each reachable object of the given list.</para>
            <para>Use it with GetComponents() to instantly have a visible list of all components in NG Console.</para>
            </summary>
            <param name="objects"></param>
        </member>
        <member name="M:NGDebug.Log(UnityEngine.RaycastHit[])">
            <summary>
            <para>Writes a log containing a pingable button for each reachable object of the given list.</para>
            <para>Use it with GetComponents() to instantly have a visible list of all components in NG Console.</para>
            </summary>
            <param name="hits"></param>
        </member>
        <member name="M:NGDebug.LogCollection(System.Collections.Generic.IEnumerable{UnityEngine.RaycastHit})">
            <summary>
            <para>Writes a log containing a pingable button for each reachable object of the given list.</para>
            <para>Use it with GetComponents() to instantly have a visible list of all components in NG Console.</para>
            </summary>
            <param name="hits"></param>
        </member>
        <member name="M:NGDebug.LogCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            <para>Writes a log containing a pingable button for each reachable object of the given list.</para>
            <para>Use it with GetComponents() to instantly have a visible list of all components in NG Console.</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objects"></param>
        </member>
        <member name="M:NGDebug.StaticSnapshot``1">
            <summary>Outputs all static fields &amp; properties from the given Type to the console.</summary>
            <typeparam name="T">Any Type containing static members.</typeparam>
        </member>
        <member name="M:NGDebug.StaticSnapshot(System.Type)">
            <summary>Outputs all static fields &amp; properties from the given Type to the console.</summary>
            <param name="type">Any Type containing static members.</param>
        </member>
        <member name="M:NGDebug.StaticSnapshotToString(System.Type)">
            <summary>Returns all static fields &amp; properties from the given Type in a readable way.</summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NGDebug.Snapshot(System.Object)">
            <summary>Outputs all public fields &amp; properties from the given object to the console.</summary>
            <param name="o"></param>
        </member>
        <member name="M:NGDebug.Snapshot(System.Object,System.String)">
            <summary>Outputs all public fields &amp; properties from the given object to the console.</summary>
            <param name="o"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:NGDebug.Snapshot(System.Object,UnityEngine.Object)">
            <summary>Outputs all public fields &amp; properties from the given object to the console.</summary>
            <param name="o"></param>
            <param name="context"></param>
        </member>
        <member name="M:NGDebug.Snapshot(System.Object,System.Reflection.BindingFlags)">
            <summary>Outputs fields &amp; properties matching the BindingFlags from the given object to the console.</summary>
            <param name="o"></param>
            <param name="bindingFlags"></param>
        </member>
        <member name="M:NGDebug.Snapshot(System.Object,System.Reflection.BindingFlags,UnityEngine.Object,System.String)">
            <summary>Outputs fields &amp; properties matching the BindingFlags from the given object to the console.</summary>
            <param name="o"></param>
            <param name="bindingFlags"></param>
            <param name="context"></param>
            <param name="suffix"></param>
        </member>
        <member name="M:NGDebug.Snapshots``1(System.Collections.Generic.IEnumerable{``0},System.Int32,UnityEngine.Object)">
            <summary>Outputs all public fields &amp; properties of all elements from the given collection.</summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="offset"></param>
            <param name="context"></param>
        </member>
        <member name="M:NGDebug.Snapshots``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Reflection.BindingFlags,UnityEngine.Object)">
            <summary>Outputs fields &amp; properties matching the BindingFlags of all elements from the given collection.</summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="offset"></param>
            <param name="bindingFlags"></param>
            <param name="context"></param>
        </member>
        <member name="M:NGDebug.Snapshots``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,UnityEngine.Object)">
            <summary>Outputs all public fields &amp; properties of the <paramref name="count"/> elements starting at <paramref name="offset"/>.</summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="context"></param>
        </member>
        <member name="M:NGDebug.Snapshots``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Reflection.BindingFlags,UnityEngine.Object)">
            <summary>Outputs fields &amp; properties of the <paramref name="count"/> elements starting at <paramref name="offset"/> matching the BindingFlags.</summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="bindingFlags"></param>
            <param name="context"></param>
        </member>
        <member name="M:NGDebug.MTLog(System.String)">
            <summary>
            <para>Log generating an exception to output a log with a stack trace to the console.</para>
            <para>Works on multi-threads.</para>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NGDebug.MTLog(System.String,UnityEngine.Object)">
            <summary>
            <para>Log generating an exception to output a log with a stack trace to the console.</para>
            <para>Works on multi-threads.</para>
            </summary>
            <param name="message"></param>
            <param name="context"></param>
        </member>
        <member name="M:NGDebug.LogTags(System.String,System.String[])">
            <summary>
            <para>Outputs a log with specific tags.</para>
            <para>Can be use with filters to easily keep/discard logs in a stream.</para>
            </summary>
            <param name="message"></param>
            <param name="tags"></param>
        </member>
        <member name="M:NGDebug.LogJSON(System.String,System.String,UnityEngine.Object)">
            <summary>Displays a convenient representation of a JSON string. Will gracefully handle parsing error.</summary>
            <param name="message"></param>
            <param name="json"></param>
            <param name="context"></param>
        </member>
        <member name="M:NGDebug.LogJSON(System.String,UnityEngine.Object)">
            <summary>Displays a convenient representation of a JSON string. Will gracefully handle parsing error.</summary>
            <param name="json"></param>
            <param name="context"></param>
        </member>
        <member name="T:MTLog">
            <summary>Exception thrown only in multithread context.</summary>
        </member>
        <member name="P:MTLog.Message">
            <summary></summary>
        </member>
        <member name="M:MTLog.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="T:NGLoggerAttribute">
            <summary>Mark a method to be a logger.</summary>
        </member>
        <member name="F:NGLoggerAttribute.tag">
            <summary>Defines a tag marked on the written log.</summary>
        </member>
        <member name="M:NGLoggerAttribute.#ctor(System.String)">
            <summary></summary>
            <param name="tag"></param>
        </member>
    </members>
</doc>
